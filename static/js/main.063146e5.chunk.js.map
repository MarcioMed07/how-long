{"version":3,"sources":["components/Header/Header.js","components/EventCard/EventCard.js","components/CardHolder/CardHolder.js","components/Content/Content.js","components/Footer/Footer.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Header","props","className","formatTimer","date","now","Date","duration","intervalToDuration","start","end","map","f","key","EventCard","event","useState","timer","setTimer","name","setName","setDate","useEffect","interval","setInterval","clearInterval","creator","onSubmit","e","preventDefault","isValid","parseISO","title","addEvent","alert","required","value","onChange","target","type","step","style","cursor","padding","onClick","removeEvent","format","CardHolder","children","initialEvents","JSON","parse","localStorage","getItem","events","Content","buildCards","cards","i","push","index","findIndex","splice","setCards","setItem","stringify","Math","max","Footer","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.063146e5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nfunction Header(props) {\r\n\treturn (\r\n\t\t<header className=\"header\">\r\n\t\t\t<h1 className=\"title\">How Long</h1>\r\n\t\t\t<p className=\"subtitle\">\r\n\t\t\t\tKeep track of how long to/since an event.\r\n\t\t\t</p>\r\n\t\t</header>\r\n\t);\r\n}\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { intervalToDuration, format, parseISO, isValid } from \"date-fns\";\r\nimport \"./EventCard.css\";\r\n\r\nfunction formatTimer(date) {\r\n\tif (!date) {\r\n\t\treturn;\r\n\t}\r\n\tconst now = new Date();\r\n\tconst duration = intervalToDuration({ start: date, end: now });\r\n\tconst format = [\r\n\t\t\"years\",\r\n\t\t\"months\",\r\n\t\t\"days\",\r\n\t\t\"hours\",\r\n\t\t\"minutes\",\r\n\t\t\"seconds\",\r\n\t];\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{format.map((f) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div key={f}>\r\n\t\t\t\t\t\t{duration[f]} {f}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t\t<div key=\"position\"> {now > date ? \"Since\" : \"Until\"} </div>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nfunction EventCard(props) {\r\n\tfunction handleSubmit(e) {\r\n\t\te.preventDefault();\r\n\t\tif(!isValid(parseISO(date))){\r\n\t\t\talert(\"Please input an ISO 8601 valid date\")\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst event = {\r\n\t\t\ttitle: name,\r\n\t\t\tdate: parseISO(date),\r\n\t\t};\r\n\t\tprops.addEvent(event);\r\n\t}\r\n\tconst event = props.event || { date: null };\r\n\tconst [timer, setTimer] = useState(formatTimer(event.date));\r\n\tconst [name, setName] = useState(\"\");\r\n\tconst [date, setDate] = useState(\"\");\r\n\r\n\tuseEffect(() => {\r\n\t\tconst interval = setInterval(() => {\r\n\t\t\tsetTimer(formatTimer(event.date));\r\n\t\t}, 1000);\r\n\t\treturn () => clearInterval(interval);\r\n\t}, []);\r\n\r\n\tif (props.creator) {\r\n\t\treturn (\r\n\t\t\t<form className=\"event-card\" onSubmit={handleSubmit}>\r\n\t\t\t\t<div className=\"event-card-timer\">\r\n\t\t\t\t\t<div>New Event</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\tDate:\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\tvalue={date}\r\n\t\t\t\t\t\t\tonChange={(e) => setDate(e.target.value)}\r\n\t\t\t\t\t\t\ttype=\"datetime-local\"\r\n\t\t\t\t\t\t\tstep=\"1\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\tEvent Name:\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\tvalue={name}\r\n\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\tvalue=\"Create Event\"\r\n\t\t\t\t\tclassName=\"event-card-title\"\r\n\t\t\t\t\tstyle={{ cursor: \"pointer\", padding: \"1em\" }}\r\n\t\t\t\t/>\r\n\t\t\t</form>\r\n\t\t);\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<div className=\"event-card\">\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName=\"delete-button material-icons-outlined\"\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tprops.removeEvent(props.event.key);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tdelete\r\n\t\t\t\t</button>\r\n\t\t\t\t<div className=\"event-card-timer\">{timer}</div>\r\n\t\t\t\t<div className=\"event-card-title\">\r\n\t\t\t\t\t<div>{event.title}</div>\r\n\t\t\t\t\t<div>{format(event.date, \"Pp\")}</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default EventCard;\r\n","import React from \"react\";\r\nimport \"./CardHolder.css\";\r\n\r\nfunction CardHolder(props) {\r\n\treturn (\r\n\t\t<div className=\"card-holder\">\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardHolder;\r\n","import React, { useState } from \"react\";\r\nimport \"./Content.css\";\r\nimport EventCard from \"../EventCard/EventCard\";\r\nimport CardHolder from \"../CardHolder/CardHolder\";\r\nimport { parseISO } from \"date-fns\";\r\n\r\nlet initialEvents = JSON.parse(localStorage.getItem(\"events\") || \"[]\");\r\ninitialEvents.map((event) => {\r\n\tevent.date = parseISO(event.date);\r\n});\r\nlet events = initialEvents;\r\n\r\nfunction Content(props) {\r\n\tfunction buildCards(events) {\r\n\t\tconst cards = [];\r\n\t\tlet i = 0;\r\n\t\tfor (let event of events) {\r\n\t\t\tcards.push(\r\n\t\t\t\t<EventCard removeEvent={removeEvent} key={i} event={event} />\r\n\t\t\t);\r\n\t\t\ti++;\r\n\t\t}\r\n\t\treturn cards;\r\n\t}\r\n\tfunction addEvent(event) {\r\n\t\tlet key = Math.max(...events.map((e) => e.key), 0) + 1;\r\n\t\tevent[\"key\"] = key;\r\n\t\tevents.push(event);\r\n\t\tlocalStorage.setItem(\"events\", JSON.stringify(events));\r\n\t\tsetCards(buildCards(events));\r\n\t}\r\n\tfunction removeEvent(key) {\r\n\t\tconst index = events.findIndex((event) => event.key === key);\r\n\t\tif (index >= 0) {\r\n\t\t\tevents.splice(index, 1);\r\n\t\t\tsetCards(buildCards(events));\r\n\t\t\tlocalStorage.setItem(\"events\", JSON.stringify(events));\r\n\t\t}\r\n\t}\r\n\tconst [cards, setCards] = useState(buildCards(initialEvents));\r\n\treturn (\r\n\t\t<div className=\"content\">\r\n\t\t\t<CardHolder>\r\n\t\t\t\t{cards}\r\n\t\t\t\t<EventCard creator={true} addEvent={addEvent} />\r\n\t\t\t</CardHolder>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Content;\r\n","import React from \"react\";\r\nimport \"./Footer.css\"\r\n\r\nfunction Footer(props) {\r\n\treturn <footer className=\"footer\">\r\n\t\t<div>Made with ReactJS by MÃ¡rcio Medeiros</div>\r\n\t\t<a href=\"https://github.com/MarcioMed07/how-long\">This project is open source</a>\r\n\t</footer>;\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\nimport Header from \"../Header/Header\";\nimport Content from \"../Content/Content\";\nimport Footer from \"../Footer/Footer\";\nimport \"./App.css\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<Header />\n\t\t\t<Content />\n\t\t\t<Footer />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}